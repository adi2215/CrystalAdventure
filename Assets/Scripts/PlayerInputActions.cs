//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""ActionManager"",
            ""id"": ""f9b01fd9-7b00-474c-aa97-d344f4ad33f0"",
            ""actions"": [
                {
                    ""name"": ""SkipDialog"",
                    ""type"": ""Button"",
                    ""id"": ""0138160d-bca2-45ef-9f5c-aa7cc0dba085"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8c5a9c5f-362a-48aa-af29-eba186387aaa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipDialog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": []
        }
    ]
}");
        // ActionManager
        m_ActionManager = asset.FindActionMap("ActionManager", throwIfNotFound: true);
        m_ActionManager_SkipDialog = m_ActionManager.FindAction("SkipDialog", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionManager
    private readonly InputActionMap m_ActionManager;
    private List<IActionManagerActions> m_ActionManagerActionsCallbackInterfaces = new List<IActionManagerActions>();
    private readonly InputAction m_ActionManager_SkipDialog;
    public struct ActionManagerActions
    {
        private @PlayerInputActions m_Wrapper;
        public ActionManagerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SkipDialog => m_Wrapper.m_ActionManager_SkipDialog;
        public InputActionMap Get() { return m_Wrapper.m_ActionManager; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionManagerActions set) { return set.Get(); }
        public void AddCallbacks(IActionManagerActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionManagerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionManagerActionsCallbackInterfaces.Add(instance);
            @SkipDialog.started += instance.OnSkipDialog;
            @SkipDialog.performed += instance.OnSkipDialog;
            @SkipDialog.canceled += instance.OnSkipDialog;
        }

        private void UnregisterCallbacks(IActionManagerActions instance)
        {
            @SkipDialog.started -= instance.OnSkipDialog;
            @SkipDialog.performed -= instance.OnSkipDialog;
            @SkipDialog.canceled -= instance.OnSkipDialog;
        }

        public void RemoveCallbacks(IActionManagerActions instance)
        {
            if (m_Wrapper.m_ActionManagerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionManagerActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionManagerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionManagerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionManagerActions @ActionManager => new ActionManagerActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IActionManagerActions
    {
        void OnSkipDialog(InputAction.CallbackContext context);
    }
}
